Ben West
CS 552 HW 6

= 1 =
== 1 ==
   
1. 00000111
   0011 ^ 0101 ^ 0110 = 0000
   codeword: 0000 0000 0111
2. 1000 1111
   1100 ^ 0111 ^ 0000 = 1011
   codeword: 1011 1000 1111
3. 1100 1010
   1100 ^ 1011 ^ 0111 ^ 0101 = 0111 ^ 0010 = 0101
   codeword: 0101 1100 1010
4. 1010 1001
   1100 ^ 1010 ^ 0111 ^ 0011 = 0110 ^ 0100 = 0010
   codeword: 0010 1010 1001

== 2 ==
1. 0011 1111 1111
   0011 ^ 1011 ^ 1010 ^ 1001 ^ 0111 ^ 0110 ^ 0101 ^ 0011
	= 1000 ^ 0011 ^ 0001 ^ 0110
	= 1011 ^ 0111
	= 1100

   Name of err: 0011 ^ 0011 = 0000 
	No bits flipped
	dataword: 1111 1111
2.
	0011 01111111
	1100 ^ 0011 = 1111
	name off err = 1111 ^ 0011 = 1100
	So bit 7 was flipped.
	dataword: 1111 1111
3. 	1110 0001 1111
	1001 ^ 0111 ^ 0110 ^ 0011
	= 1110 ^ 0101
	= 1011
	name of err = 1101 ^ 1110 = 0011
	So bit 0 was flipped
	dataword: 0001 1110
4. 0111 1000 1011
	1100 ^ 0111 ^ 0101 ^ 0011
	= 1011 ^ 0110
	= 1101
	name of err = 1011 ^ 0111 = 1100
	So bit 7 was flipped
	dataword: 0000 1011

= 2 =
0010 1011 * 0101 0101
A in dec = +0010 1001 = 32 + 9 = 41
B in dec = +0101 0110 = 64 + 16 + 6 = 86

41 * 86 = 3526

A: 0101 0110 0000 0000 0
S: 1010 1010 0000 0000 0
P: 0000 0000 0010 1001 0

P ends with 10
	P +  S: 1010 1010 0010 1001 0
	P >> 1: 1101 0101 0001 0100 1

P ends with 01
	P +  A: 0010 1011 0001 0100 1
	P >> 1: 0001 0101 1000 1010 0

P ends with 00
	P >> 1: 0000 1010 1100 0101 0

P ends with 10
	P +  S: 1011 0100 1100 0101 0
	P >> 1: 1101 1010 0110 0010 1

P ends with 01
	P +  A: 0011 0000 0110 0010 1
	P >> 1: 0001 1000 0011 0001 0

P ends wwith 10
	P +  S: 1100 0010 0011 0001 0
	P >> 1: 1110 0001 0001 1000 1

P ends with 01
	P +  A: 0011 0111 0001 1000 1
	P >> 1: 0001 1011 1000 1100 0

P ends with 00
	P >> 1: 0000 1101 1100 0110 0

P ends with 00
	P >> 1: 0000 0110 1110 0011 0

This is 3526 as expected

= 3 =
A = 0101 1000 = 88_10
B = 0101 = 5_10
A / B = 17

Iteration Step			Quotient Divisor 	Remainder
0	  init			0000	 0101 0000	0000 1000
1	  rem -= div		0000	 0101 0000	1011 1000 
	  rem<0,  restore,	0000	 0101 0000	0000 1000
	  div >> 1		0000	 0010 1000	0000 1000
2.	  rem -= div		0000	 0010 1000	1110 0000
	  rem<0, restore	0000	 0010 1000	0000 1000
	  div >> 1		0000	 0001 0100	0000 1000
3.	  rem -= div	 	0000	 0001 0100	1111 0100
	  rem<0, restore	0000	 0001 0100	0000 1000
	  div >> 1	   	0000	 0000 1010	0000 1000
4.	  rem -= div	 	0000	 0000 1010	1000 0010
	  rem<0, restore	0000	 0000 1010	0000 1000
	  div >> 1		0000	 0000 0101	0000 1000
5.	  rem -= div		0000	 0000 0101	0000 0010
	  rem>0,q<<1		0001	 0000 0101	0000 0010
	  div >> 1		0001	 0000 0010	0000 0010
6.	  rem -= div		0001	 0000 0010	0000 0000
	  rem>=0		0011	 0000 0010	0000 0000
	  div >> 1		0011	 0000 0001	0000 0000
7.	  rem -= div		0011	 0000 0001	1111 1111
	  rem<0			0110	 0000 0001	0000 0000
	  div >> 1		0110	 0000 0000	0000 0000

= 4 =
== 1 ==
17 =  10001

.384 < 0         -> 0
.384 - .25 = .134 -> 1
.134 - .125 = .009 -> 1
.009 - .0625 < 0   -> 0

.009 - 1/32  < 0   -> 0
.009 - 1/64  < 0   -> 0
.009 - 1/128 =.0011875 -> 1
.0011875 - 1/256 < 0 -> 0

.0011875 - 1/512 < 0 -> 0
.0011875 - 1/1024 = 0.0002109375 -> 1
0.0002109375 - 1/2048 < 0 -> 0
0.0002109375 - 1/4096 < 0 -> 0

0.0002109375 - 1/8192 = 8.88e-5 -> 1
8.88e-5 - 2^-14 = 2.776e-5 -> 1
2.776e-5 - 2^-15 < 0 -> 0
2.776e-5 - 2^-16 = 1.25e-5  -> 1

1.25e-5  - 2^-17 = 4.87e-6  -> 1
4.87e-6  - 2^-18 = 1.05e-6  -> 1
1.05e-6  - 2^-19 < 0        -> 0

So this is 10001.0110 0010 0100 1101 110
Or 1.0001 0110 0010 0100 1101 110 * 2^4
So E = 127 + 4 = 131 = 1000 0011
S = 0
F = 0001 0110 0010 0100 1101 110

Final:
0 1000 0011 0001 0110 0010 0100 1101 110


== 2 ==
0000 0100 0000 0100 1001 0000 1001 0110
Sign: 0
Exponent: 0000 1000 = 8
Fraction: 0000 1001 0010 0001 0010 110 

x = [0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 1 0 0 1 0 1 1 0]
y = 2 .^ (-1:-1:-23)
dot(x,y)
ans =  0.035662

unbiased exponent = 8-127 = -119
1.035662 * 2^-119 = 1.5583e-36
So final answer is 1.5583e-36


= 5 =

- The two array programs consist of two loops, in which an ideal cache will have 0 misses in the second loop.
- The two dot programs move linearly through memory, so there should be length of loop / size of cache line misses (i.e. longer cache lines perform better)
- The two dot programs have reused accumulator variables, so efficient hazard detection is important
- All programs come in two flavors: optimized for predict-taken, and optimized for predict-not-taken. 

// array.asm
// Cycles: 7522
//
// In pseudocode:
//	
// for i = 1 to max
//    arr[i] = foo
// for i = 1 to max
//    foo = arr[i]
//
// An ideal cache will have no misses in the second loop
// By changing the size of each element in the array (r4) we can make a
// pathological case in which all the elements have the same tag but
// a different index
//
// Also note that this is worst-case behavior for a predict-not-taken
// branch predictor, since we're almost always going to branch. 
lbi  r0, 0   // r0 = current offset
slbi r0, 0
lbi  r1, 0   // r1 = counter
slbi r1, 0
lbi  r2, 0   // r2 = max
slbi r2, 64
lbi  r4, 64  // r4 = increment amount
slbi r4, 0
.writeLoop:
	st   r3, r0, 0
	addi r1, r1, 1
	add  r0, r0, r4
	sub  r3, r2, r1
	bnez r3, .writeLoop
lbi r1, 0
slbi r1, 0
.readLoop:
	ld   r3, r0, 0
	addi r1, r1, 1
	add  r0, r0, r4
	sub  r3, r2, r1
	bnez r3, .readLoop
halt
	
// array_predict_not_taken.asm
// Cycles: 3884
//
// This is similar to array.asm, except the branches are usually *not* taken
//
// In pseudocode:
//	
// for i = 1 to max
//    arr[i] = foo
// for i = 1 to max
//    foo = arr[i]
//
// An ideal cache will have no misses in the second loop
// By changing the size of each element in the array (r4) we can make a
// pathological case in which all the elements have the same tag but
// a different index
	
lbi  r0, 0   // r0 = current offset
slbi r0, 0
lbi  r1, 0   // r1 = counter
slbi r1, 0
lbi  r2, 0   // r2 = max
slbi r2, 64
lbi  r4, 64  // r4 = increment amount
slbi r4, 0
.writeLoop:
	sub  r3, r2, r1
	beqz r3, .writeDone
	st   r3, r0, 0
	addi r1, r1, 1
	add  r0, r0, r4
	j    .writeLoop
.writeDone:	
	lbi r1, 0	
	slbi r1, 0
.readLoop:
	beqz r3, .readDone
	ld   r3, r0, 0
	addi r1, r1, 1
	add  r0, r0, r4
	sub  r3, r2, r1
	j .readLoop
.readDone:
	halt

// dot.asm
// Cycles: 9555
//
// This is indended to be like a dot product, but we don't have a multiplication instruction.
// So it is the sum of the difference of the vectors (i.e. instead of a[i] * b[i] we have
// a[i] - b[i]).
//
// Because we're reusing the registers, forwarding is very important.
// Additionally, since each entry is only one word, loading a long cache line
// will help.
//
// This program is optimized for predict not taken
//
// In pseudocode:
//
// for i = 1 to max:
// 	accum += a[i] - b[i]

lbi  r0, 0  // r0 = i
slbi r0, 0
lbi  r1, 0  // r1 = max
slbi r1, 64
lbi  r2, 0  // r2 = accum
slbi r2, 0
lbi  r3, 0  // r3 = addr of a[i]
slbi r3, 0
lbi  r4, 64 // r4 = addr of b[i]
slbi r4, 0
.loop:
	addi r3, r3, 16
	ld   r5, r3, 0   // RAW for r3
	addi r4, r4, 16
	ld   r6, r4, 0   // RAW for r4
	sub  r5, r5, r6  // WAW and RAW for r5, RAW for r6
	add  r2, r2, r5  // RAW for r5
	addi r0, r0, 1
	sub  r6, r0, r1  // RAW for r0
	beqz r6, .end    // RAW for r6 and branch predict. This will usually not be taken
	j    .loop
.end:
	halt

// dot_fewer_conflicts.asm
// Cycles: 5068
//
// This is the same as dot.asm, but with the instructions reordered for fewer conflicts
//
// This is indended to be like a dot product, but we don't have a multiplication instruction.
// So it is the sum of the difference of the vectors (i.e. instead of a[i] * b[i] we have
// a[i] - b[i]).
//
// Because we're reusing the registers, forwarding is very important.
// Additionally, since each entry is only one word, loading a long cache line
// will help.
//
// This program is optimized for predict not taken
//
// In pseudocode:
//
// for i = 1 to max:
// 	accum += a[i] - b[i]

lbi  r0, 0  // r0 = i
slbi r0, 0
lbi  r1, 0  // r1 = max
slbi r1, 64
lbi  r2, 0  // r2 = accum
slbi r2, 0
lbi  r3, 0  // r3 = addr of a[i]
slbi r3, 0
lbi  r4, 64 // r4 = addr of b[i]
slbi r4, 0
.loop:
	ld   r5, r3, 0 
	ld   r6, r4, 0 
	addi r0, r0, 1
	addi r3, r3, 16
	addi r4, r4, 16
	sub  r5, r5, r6
	sub  r6, r0, r1
	add  r2, r2, r5  
	beqz r6, .end    
	j    .loop
.end:
	halt
