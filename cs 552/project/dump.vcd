$date
	Tue Mar 22 16:09:40 2011
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module tb_fetch $end
$var wire 1 ! Clk $end
$var wire 1 " Err $end
$var wire 16 # Instruction [15:0] $end
$var wire 1 $ Rst $end
$var reg 16 % PcPrime [15:0] $end
$var reg 1 & PcSrc $end
$scope module clk $end
$var wire 1 " err $end
$var reg 1 ' clk $end
$var integer 32 ( cycle_count [31:0] $end
$var reg 1 ) rst $end
$upscope $end
$scope module fetch0 $end
$var wire 1 ! Clk $end
$var wire 16 * Instruction [15:0] $end
$var wire 16 + NewPc [15:0] $end
$var wire 1 , PcSrc $end
$var wire 1 $ Rst $end
$var wire 16 - foo [15:0] $end
$var wire 16 . instruction [15:0] $end
$var wire 16 / nextPc [15:0] $end
$var wire 16 0 pc [15:0] $end
$var wire 16 1 pcPlusTwo [15:0] $end
$scope module instruction_memory $end
$var wire 16 2 addr [15:0] $end
$var wire 1 ! clk $end
$var wire 1 3 createdump $end
$var wire 16 4 data_in [15:0] $end
$var wire 16 5 data_out [15:0] $end
$var wire 1 6 enable $end
$var wire 1 $ rst $end
$var wire 1 7 wr $end
$var reg 17 8 largest [16:0] $end
$var reg 1 9 loaded $end
$upscope $end
$scope module pcIncrementer $end
$var wire 16 : Pc [15:0] $end
$var wire 16 ; PcPrime [15:0] $end
$var wire 1 < foo $end
$scope module a16 $end
$var wire 16 = A [15:0] $end
$var wire 16 > B [15:0] $end
$var wire 3 ? C [2:0] $end
$var wire 1 @ Cin $end
$var wire 1 < Cout $end
$var wire 4 A G [3:0] $end
$var wire 4 B P [3:0] $end
$var wire 16 C S [15:0] $end
$scope module f1 $end
$var wire 4 D A [3:0] $end
$var wire 4 E B [3:0] $end
$var wire 1 F G $end
$var wire 1 G P $end
$var wire 4 H gPartial [3:0] $end
$var wire 4 I pPartial [3:0] $end
$scope module o1 $end
$var wire 1 J A $end
$var wire 1 K B $end
$var wire 1 L G $end
$var wire 1 M P $end
$upscope $end
$scope module o2 $end
$var wire 1 N A $end
$var wire 1 O B $end
$var wire 1 P G $end
$var wire 1 Q P $end
$upscope $end
$scope module o3 $end
$var wire 1 R A $end
$var wire 1 S B $end
$var wire 1 T G $end
$var wire 1 U P $end
$upscope $end
$scope module o4 $end
$var wire 1 V A $end
$var wire 1 W B $end
$var wire 1 X G $end
$var wire 1 Y P $end
$upscope $end
$upscope $end
$scope module f2 $end
$var wire 4 Z A [3:0] $end
$var wire 4 [ B [3:0] $end
$var wire 1 \ G $end
$var wire 1 ] P $end
$var wire 4 ^ gPartial [3:0] $end
$var wire 4 _ pPartial [3:0] $end
$scope module o1 $end
$var wire 1 ` A $end
$var wire 1 a B $end
$var wire 1 b G $end
$var wire 1 c P $end
$upscope $end
$scope module o2 $end
$var wire 1 d A $end
$var wire 1 e B $end
$var wire 1 f G $end
$var wire 1 g P $end
$upscope $end
$scope module o3 $end
$var wire 1 h A $end
$var wire 1 i B $end
$var wire 1 j G $end
$var wire 1 k P $end
$upscope $end
$scope module o4 $end
$var wire 1 l A $end
$var wire 1 m B $end
$var wire 1 n G $end
$var wire 1 o P $end
$upscope $end
$upscope $end
$scope module f3 $end
$var wire 4 p A [3:0] $end
$var wire 4 q B [3:0] $end
$var wire 1 r G $end
$var wire 1 s P $end
$var wire 4 t gPartial [3:0] $end
$var wire 4 u pPartial [3:0] $end
$scope module o1 $end
$var wire 1 v A $end
$var wire 1 w B $end
$var wire 1 x G $end
$var wire 1 y P $end
$upscope $end
$scope module o2 $end
$var wire 1 z A $end
$var wire 1 { B $end
$var wire 1 | G $end
$var wire 1 } P $end
$upscope $end
$scope module o3 $end
$var wire 1 ~ A $end
$var wire 1 !" B $end
$var wire 1 "" G $end
$var wire 1 #" P $end
$upscope $end
$scope module o4 $end
$var wire 1 $" A $end
$var wire 1 %" B $end
$var wire 1 &" G $end
$var wire 1 '" P $end
$upscope $end
$upscope $end
$scope module f4 $end
$var wire 4 (" A [3:0] $end
$var wire 4 )" B [3:0] $end
$var wire 1 *" G $end
$var wire 1 +" P $end
$var wire 4 ," gPartial [3:0] $end
$var wire 4 -" pPartial [3:0] $end
$scope module o1 $end
$var wire 1 ." A $end
$var wire 1 /" B $end
$var wire 1 0" G $end
$var wire 1 1" P $end
$upscope $end
$scope module o2 $end
$var wire 1 2" A $end
$var wire 1 3" B $end
$var wire 1 4" G $end
$var wire 1 5" P $end
$upscope $end
$scope module o3 $end
$var wire 1 6" A $end
$var wire 1 7" B $end
$var wire 1 8" G $end
$var wire 1 9" P $end
$upscope $end
$scope module o4 $end
$var wire 1 :" A $end
$var wire 1 ;" B $end
$var wire 1 <" G $end
$var wire 1 =" P $end
$upscope $end
$upscope $end
$scope module a1 $end
$var wire 4 >" A [3:0] $end
$var wire 4 ?" B [3:0] $end
$var wire 4 @" C [3:0] $end
$var wire 1 @ Cin $end
$var wire 4 A" S [3:0] $end
$scope module a1 $end
$var wire 1 B" A $end
$var wire 1 C" B $end
$var wire 1 @ Cin $end
$var wire 1 D" Cout $end
$var wire 1 E" S $end
$upscope $end
$scope module a2 $end
$var wire 1 F" A $end
$var wire 1 G" B $end
$var wire 1 H" Cin $end
$var wire 1 I" Cout $end
$var wire 1 J" S $end
$upscope $end
$scope module a3 $end
$var wire 1 K" A $end
$var wire 1 L" B $end
$var wire 1 M" Cin $end
$var wire 1 N" Cout $end
$var wire 1 O" S $end
$upscope $end
$scope module a4 $end
$var wire 1 P" A $end
$var wire 1 Q" B $end
$var wire 1 R" Cin $end
$var wire 1 S" Cout $end
$var wire 1 T" S $end
$upscope $end
$upscope $end
$scope module a2 $end
$var wire 4 U" A [3:0] $end
$var wire 4 V" B [3:0] $end
$var wire 4 W" C [3:0] $end
$var wire 1 X" Cin $end
$var wire 4 Y" S [3:0] $end
$scope module a1 $end
$var wire 1 Z" A $end
$var wire 1 [" B $end
$var wire 1 X" Cin $end
$var wire 1 \" Cout $end
$var wire 1 ]" S $end
$upscope $end
$scope module a2 $end
$var wire 1 ^" A $end
$var wire 1 _" B $end
$var wire 1 `" Cin $end
$var wire 1 a" Cout $end
$var wire 1 b" S $end
$upscope $end
$scope module a3 $end
$var wire 1 c" A $end
$var wire 1 d" B $end
$var wire 1 e" Cin $end
$var wire 1 f" Cout $end
$var wire 1 g" S $end
$upscope $end
$scope module a4 $end
$var wire 1 h" A $end
$var wire 1 i" B $end
$var wire 1 j" Cin $end
$var wire 1 k" Cout $end
$var wire 1 l" S $end
$upscope $end
$upscope $end
$scope module a3 $end
$var wire 4 m" A [3:0] $end
$var wire 4 n" B [3:0] $end
$var wire 4 o" C [3:0] $end
$var wire 1 p" Cin $end
$var wire 4 q" S [3:0] $end
$scope module a1 $end
$var wire 1 r" A $end
$var wire 1 s" B $end
$var wire 1 p" Cin $end
$var wire 1 t" Cout $end
$var wire 1 u" S $end
$upscope $end
$scope module a2 $end
$var wire 1 v" A $end
$var wire 1 w" B $end
$var wire 1 x" Cin $end
$var wire 1 y" Cout $end
$var wire 1 z" S $end
$upscope $end
$scope module a3 $end
$var wire 1 {" A $end
$var wire 1 |" B $end
$var wire 1 }" Cin $end
$var wire 1 ~" Cout $end
$var wire 1 !# S $end
$upscope $end
$scope module a4 $end
$var wire 1 "# A $end
$var wire 1 ## B $end
$var wire 1 $# Cin $end
$var wire 1 %# Cout $end
$var wire 1 &# S $end
$upscope $end
$upscope $end
$scope module a4 $end
$var wire 4 '# A [3:0] $end
$var wire 4 (# B [3:0] $end
$var wire 4 )# C [3:0] $end
$var wire 1 *# Cin $end
$var wire 4 +# S [3:0] $end
$scope module a1 $end
$var wire 1 ,# A $end
$var wire 1 -# B $end
$var wire 1 *# Cin $end
$var wire 1 .# Cout $end
$var wire 1 /# S $end
$upscope $end
$scope module a2 $end
$var wire 1 0# A $end
$var wire 1 1# B $end
$var wire 1 2# Cin $end
$var wire 1 3# Cout $end
$var wire 1 4# S $end
$upscope $end
$scope module a3 $end
$var wire 1 5# A $end
$var wire 1 6# B $end
$var wire 1 7# Cin $end
$var wire 1 8# Cout $end
$var wire 1 9# S $end
$upscope $end
$scope module a4 $end
$var wire 1 :# A $end
$var wire 1 ;# B $end
$var wire 1 <# Cin $end
$var wire 1 =# Cout $end
$var wire 1 ># S $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module r16 $end
$var wire 1 ! clk $end
$var wire 16 ?# readdata [15:0] $end
$var wire 1 $ rst $end
$var wire 1 @# write $end
$var wire 16 A# writedata [15:0] $end
$scope module r0 $end
$var wire 1 B# actualWrite $end
$var wire 1 ! clk $end
$var wire 1 C# readdata $end
$var wire 1 $ rst $end
$var wire 1 @# write $end
$var wire 1 D# writedata $end
$scope module data $end
$var wire 1 ! clk $end
$var wire 1 B# d $end
$var wire 1 C# q $end
$var wire 1 $ rst $end
$var reg 1 E# state $end
$upscope $end
$upscope $end
$scope module r1 $end
$var wire 1 F# actualWrite $end
$var wire 1 ! clk $end
$var wire 1 G# readdata $end
$var wire 1 $ rst $end
$var wire 1 @# write $end
$var wire 1 H# writedata $end
$scope module data $end
$var wire 1 ! clk $end
$var wire 1 F# d $end
$var wire 1 G# q $end
$var wire 1 $ rst $end
$var reg 1 I# state $end
$upscope $end
$upscope $end
$scope module r2 $end
$var wire 1 J# actualWrite $end
$var wire 1 ! clk $end
$var wire 1 K# readdata $end
$var wire 1 $ rst $end
$var wire 1 @# write $end
$var wire 1 L# writedata $end
$scope module data $end
$var wire 1 ! clk $end
$var wire 1 J# d $end
$var wire 1 K# q $end
$var wire 1 $ rst $end
$var reg 1 M# state $end
$upscope $end
$upscope $end
$scope module r3 $end
$var wire 1 N# actualWrite $end
$var wire 1 ! clk $end
$var wire 1 O# readdata $end
$var wire 1 $ rst $end
$var wire 1 @# write $end
$var wire 1 P# writedata $end
$scope module data $end
$var wire 1 ! clk $end
$var wire 1 N# d $end
$var wire 1 O# q $end
$var wire 1 $ rst $end
$var reg 1 Q# state $end
$upscope $end
$upscope $end
$scope module r4 $end
$var wire 1 R# actualWrite $end
$var wire 1 ! clk $end
$var wire 1 S# readdata $end
$var wire 1 $ rst $end
$var wire 1 @# write $end
$var wire 1 T# writedata $end
$scope module data $end
$var wire 1 ! clk $end
$var wire 1 R# d $end
$var wire 1 S# q $end
$var wire 1 $ rst $end
$var reg 1 U# state $end
$upscope $end
$upscope $end
$scope module r5 $end
$var wire 1 V# actualWrite $end
$var wire 1 ! clk $end
$var wire 1 W# readdata $end
$var wire 1 $ rst $end
$var wire 1 @# write $end
$var wire 1 X# writedata $end
$scope module data $end
$var wire 1 ! clk $end
$var wire 1 V# d $end
$var wire 1 W# q $end
$var wire 1 $ rst $end
$var reg 1 Y# state $end
$upscope $end
$upscope $end
$scope module r6 $end
$var wire 1 Z# actualWrite $end
$var wire 1 ! clk $end
$var wire 1 [# readdata $end
$var wire 1 $ rst $end
$var wire 1 @# write $end
$var wire 1 \# writedata $end
$scope module data $end
$var wire 1 ! clk $end
$var wire 1 Z# d $end
$var wire 1 [# q $end
$var wire 1 $ rst $end
$var reg 1 ]# state $end
$upscope $end
$upscope $end
$scope module r7 $end
$var wire 1 ^# actualWrite $end
$var wire 1 ! clk $end
$var wire 1 _# readdata $end
$var wire 1 $ rst $end
$var wire 1 @# write $end
$var wire 1 `# writedata $end
$scope module data $end
$var wire 1 ! clk $end
$var wire 1 ^# d $end
$var wire 1 _# q $end
$var wire 1 $ rst $end
$var reg 1 a# state $end
$upscope $end
$upscope $end
$scope module r8 $end
$var wire 1 b# actualWrite $end
$var wire 1 ! clk $end
$var wire 1 c# readdata $end
$var wire 1 $ rst $end
$var wire 1 @# write $end
$var wire 1 d# writedata $end
$scope module data $end
$var wire 1 ! clk $end
$var wire 1 b# d $end
$var wire 1 c# q $end
$var wire 1 $ rst $end
$var reg 1 e# state $end
$upscope $end
$upscope $end
$scope module r9 $end
$var wire 1 f# actualWrite $end
$var wire 1 ! clk $end
$var wire 1 g# readdata $end
$var wire 1 $ rst $end
$var wire 1 @# write $end
$var wire 1 h# writedata $end
$scope module data $end
$var wire 1 ! clk $end
$var wire 1 f# d $end
$var wire 1 g# q $end
$var wire 1 $ rst $end
$var reg 1 i# state $end
$upscope $end
$upscope $end
$scope module r10 $end
$var wire 1 j# actualWrite $end
$var wire 1 ! clk $end
$var wire 1 k# readdata $end
$var wire 1 $ rst $end
$var wire 1 @# write $end
$var wire 1 l# writedata $end
$scope module data $end
$var wire 1 ! clk $end
$var wire 1 j# d $end
$var wire 1 k# q $end
$var wire 1 $ rst $end
$var reg 1 m# state $end
$upscope $end
$upscope $end
$scope module r11 $end
$var wire 1 n# actualWrite $end
$var wire 1 ! clk $end
$var wire 1 o# readdata $end
$var wire 1 $ rst $end
$var wire 1 @# write $end
$var wire 1 p# writedata $end
$scope module data $end
$var wire 1 ! clk $end
$var wire 1 n# d $end
$var wire 1 o# q $end
$var wire 1 $ rst $end
$var reg 1 q# state $end
$upscope $end
$upscope $end
$scope module r12 $end
$var wire 1 r# actualWrite $end
$var wire 1 ! clk $end
$var wire 1 s# readdata $end
$var wire 1 $ rst $end
$var wire 1 @# write $end
$var wire 1 t# writedata $end
$scope module data $end
$var wire 1 ! clk $end
$var wire 1 r# d $end
$var wire 1 s# q $end
$var wire 1 $ rst $end
$var reg 1 u# state $end
$upscope $end
$upscope $end
$scope module r13 $end
$var wire 1 v# actualWrite $end
$var wire 1 ! clk $end
$var wire 1 w# readdata $end
$var wire 1 $ rst $end
$var wire 1 @# write $end
$var wire 1 x# writedata $end
$scope module data $end
$var wire 1 ! clk $end
$var wire 1 v# d $end
$var wire 1 w# q $end
$var wire 1 $ rst $end
$var reg 1 y# state $end
$upscope $end
$upscope $end
$scope module r14 $end
$var wire 1 z# actualWrite $end
$var wire 1 ! clk $end
$var wire 1 {# readdata $end
$var wire 1 $ rst $end
$var wire 1 @# write $end
$var wire 1 |# writedata $end
$scope module data $end
$var wire 1 ! clk $end
$var wire 1 z# d $end
$var wire 1 {# q $end
$var wire 1 $ rst $end
$var reg 1 }# state $end
$upscope $end
$upscope $end
$scope module r15 $end
$var wire 1 ~# actualWrite $end
$var wire 1 ! clk $end
$var wire 1 !$ readdata $end
$var wire 1 $ rst $end
$var wire 1 @# write $end
$var wire 1 "$ writedata $end
$scope module data $end
$var wire 1 ! clk $end
$var wire 1 ~# d $end
$var wire 1 !$ q $end
$var wire 1 $ rst $end
$var reg 1 #$ state $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x#$
0"$
x!$
0~#
x}#
0|#
x{#
0z#
xy#
0x#
xw#
0v#
xu#
0t#
xs#
0r#
xq#
0p#
xo#
0n#
xm#
0l#
xk#
0j#
xi#
0h#
xg#
0f#
xe#
0d#
xc#
0b#
xa#
0`#
x_#
0^#
x]#
0\#
x[#
0Z#
xY#
0X#
xW#
0V#
xU#
0T#
xS#
0R#
xQ#
0P#
xO#
0N#
xM#
0L#
xK#
0J#
xI#
0H#
xG#
0F#
xE#
0D#
xC#
0B#
b0 A#
1@#
bx ?#
x>#
x=#
x<#
0;#
x:#
x9#
x8#
x7#
06#
x5#
x4#
x3#
x2#
01#
x0#
x/#
x.#
0-#
x,#
bx +#
x*#
bx )#
b0 (#
bx '#
x&#
x%#
x$#
0##
x"#
x!#
x~"
x}"
0|"
x{"
xz"
xy"
xx"
0w"
xv"
xu"
xt"
0s"
xr"
bx q"
xp"
bx o"
b0 n"
bx m"
xl"
xk"
xj"
0i"
xh"
xg"
xf"
xe"
0d"
xc"
xb"
xa"
x`"
0_"
x^"
x]"
x\"
0["
xZ"
bx Y"
xX"
bx W"
b0 V"
bx U"
xT"
xS"
xR"
0Q"
xP"
xO"
xN"
xM"
0L"
xK"
xJ"
xI"
0H"
1G"
xF"
xE"
0D"
0C"
xB"
bx A"
bx0 @"
b10 ?"
bx >"
x="
0<"
0;"
x:"
x9"
08"
07"
x6"
x5"
04"
03"
x2"
x1"
00"
0/"
x."
bx -"
b0 ,"
x+"
0*"
b0 )"
bx ("
x'"
0&"
0%"
x$"
x#"
0""
0!"
x~
x}
0|
0{
xz
xy
0x
0w
xv
bx u
b0 t
xs
0r
b0 q
bx p
xo
0n
0m
xl
xk
0j
0i
xh
xg
0f
0e
xd
xc
0b
0a
x`
bx _
b0 ^
x]
0\
b0 [
bx Z
xY
0X
0W
xV
xU
0T
0S
xR
xQ
xP
1O
xN
xM
0L
0K
xJ
bx I
b0x0 H
xG
xF
b10 E
bx D
bx C
bx B
b0x A
0@
bx ?
b10 >
bx =
x<
bx ;
bx :
09
b0 8
07
16
bx 5
bz 4
03
bx 2
bx 1
bx 0
b0 /
bx .
bz -
1,
b0 +
bz *
1)
b0 (
1'
1&
b0 %
1$
bz #
z"
1!
$end
#50000000000
0'
0!
#100000000000
xB#
xF#
xJ#
xN#
xR#
xV#
xZ#
x^#
xb#
xf#
xj#
xn#
xr#
xv#
xz#
x~#
xD#
xH#
xL#
xP#
xT#
xX#
x\#
x`#
xd#
xh#
xl#
xp#
xt#
xx#
x|#
x"$
bx /
bx A#
b1 (
0E#
0I#
0M#
0Q#
0U#
0Y#
0]#
0a#
0e#
0i#
0m#
0q#
0u#
0y#
0}#
0#$
0&
0,
b11010100100100 %
b11010100100100 +
1'
1!
#101000000000
0R#
0b#
0r#
0T#
0d#
0t#
0/#
0]"
0J#
0u"
0*#
0X"
0p"
0<
0N#
0V#
0Z#
0^#
0f#
0j#
0n#
0v#
0z#
0~#
0L#
b0 ?
0B#
1F#
0P#
0X#
0\#
0`#
0h#
0l#
0p#
0x#
0|#
0"$
0F
b0 A
0O"
0D#
1H#
0M"
0T"
0b"
0g"
0l"
b0 Y"
0z"
0!#
0&#
b0 q"
04#
09#
0>#
b0 +#
0G
b10 /
b10 A#
0I"
0R"
0]
0`"
0e"
0j"
0s
0x"
0}"
0$#
0+"
b0 B
02#
07#
0<#
0E"
1J"
b10 1
b10 ;
b10 C
b10 A"
0N"
0S"
b0 @"
0\"
0a"
0f"
0k"
b0 W"
0t"
0y"
0~"
0%#
b0 o"
0.#
03#
08#
0=#
b0 )#
0M
0P
b0 H
1Q
0U
0Y
b10 I
0c
0g
0k
0o
b0 _
0y
0}
0#"
0'"
b0 u
01"
05"
09"
0="
b0 -"
0J
0N
0R
0V
0B"
0F"
0K"
0P"
0`
0d
0h
0l
0Z"
0^"
0c"
0h"
0v
0z
0~
0$"
0r"
0v"
0{"
0"#
0."
02"
06"
0:"
0,#
00#
05#
0:#
b0 D
b0 >"
b0 Z
b0 U"
b0 p
b0 m"
b0 ("
b0 '#
0C#
0G#
0K#
0O#
0S#
0W#
0[#
0_#
0c#
0g#
0k#
0o#
0s#
0w#
0{#
0!$
b0 0
b0 2
b0 :
b0 =
b0 ?#
#150000000000
0'
0!
#200000000000
b101111010000001 %
b101111010000001 +
b10 (
1'
1!
#201000000000
0)
0$
#250000000000
0'
0!
#300000000000
b11 (
1I#
b1101011000001001 %
b1101011000001001 +
1'
1!
#301000000000
1J#
1L#
0F#
1O"
0H#
1M"
b100 /
b100 A#
1I"
b10 @"
0J"
b100 1
b100 ;
b100 C
b100 A"
1P
b10 H
0Q
b0 I
1N
1F"
b10 D
b10 >"
1G#
b10 0
b10 2
b10 :
b10 =
b10 ?#
#350000000000
0'
0!
#400000000000
b101011001100011 %
b101011001100011 +
1M#
0I#
b100 (
1'
1!
#401000000000
0N#
1F#
1J#
0P#
0M"
1H#
1L#
0T"
0I"
b110 /
b110 A#
0R"
1J"
1O"
b110 1
b110 ;
b110 C
b110 A"
0N"
b0 @"
0P
b0 H
1Q
1U
b110 I
0N
1R
0F"
1K"
b100 D
b100 >"
1K#
0G#
b100 0
b100 2
b100 :
b100 =
b100 ?#
#450000000000
0'
0!
#500000000000
b101 (
1I#
b111101100001101 %
b111101100001101 +
1'
1!
#501000000000
1N#
1P#
0J#
1T"
0L#
1R"
0F#
1N"
0O"
0H#
1M"
b1000 /
b1000 A#
1I"
b110 @"
0J"
b1000 1
b1000 ;
b1000 C
b1000 A"
1P
b10 H
0Q
b100 I
1N
1F"
b110 D
b110 >"
1G#
b110 0
b110 2
b110 :
b110 =
b110 ?#
#550000000000
0'
0!
#600000000000
1B#
1J#
1^#
1b#
1n#
1r#
1~#
1D#
1L#
1`#
1d#
1p#
1t#
1"$
b1001100110001101 /
b1001100110001101 A#
1&
1,
b1001100110001101 %
b1001100110001101 +
1Q#
0M#
0I#
b110 (
1'
1!
#601000000000
0]"
b0 Y"
0X"
b0 ?
0F
b0 A
0M"
0I"
0R"
1J"
0O"
0N"
1T"
b1010 1
b1010 ;
b1010 C
b1010 A"
0S"
b0 @"
0P
b0 H
1Q
0U
1Y
b1010 I
0N
0R
1V
0F"
0K"
1P"
b1000 D
b1000 >"
1O#
0K#
0G#
b1000 0
b1000 2
b1000 :
b1000 =
b1000 ?#
#650000000000
0'
0!
#700000000000
0B#
1F#
0J#
0^#
0b#
0n#
0r#
0~#
0D#
1H#
0L#
0`#
0d#
0p#
0t#
0"$
b1010 /
b1010 A#
b111 (
1E#
1M#
1a#
1e#
1q#
1u#
1#$
0&
0,
b1000010001100101 %
b1000010001100101 +
1'
1!
#701000000000
1B#
1J#
1^#
1b#
1n#
1r#
1~#
1G
b1 B
1D#
1L#
1`#
1d#
1p#
1t#
1"$
b1001100110001111 /
b1001100110001111 A#
1E"
1O"
b1111 A"
1l"
b1000 Y"
1u"
1&#
b1001 q"
1/#
1>#
b1001100110001111 1
b1001100110001111 ;
b1001100110001111 C
b1001 +#
1M
1U
b1111 I
1o
b1000 _
1y
1'"
b1001 u
11"
1="
b1001 -"
1J
1R
1B"
1K"
1l
1h"
1v
1$"
1r"
1"#
1."
1:"
1,#
1:#
b1101 D
b1101 >"
b1000 Z
b1000 U"
b1001 p
b1001 m"
b1001 ("
b1001 '#
1C#
1K#
1_#
1c#
1o#
1s#
1!$
b1001100110001101 0
b1001100110001101 2
b1001100110001101 :
b1001100110001101 =
b1001100110001101 ?#
#750000000000
0'
0!
#800000000000
b101001000010010 %
b101001000010010 +
1I#
b1000 (
1'
1!
#801000000000
1R#
1T#
0N#
1]"
b1001 Y"
0P#
1X"
0J#
1S"
b1 ?
0T"
0L#
1R"
1F
b1 A
0F#
1N"
0G
b0 B
0O"
0H#
1M"
b1001100110010001 /
b1001100110010001 A#
1I"
b1110 @"
0J"
b1001100110010001 1
b1001100110010001 ;
b1001100110010001 C
b1 A"
1P
b10 H
0Q
b1101 I
1N
1F"
b1111 D
b1111 >"
1G#
b1001100110001111 0
b1001100110001111 2
b1001100110001111 :
b1001100110001111 =
b1001100110001111 ?#
#850000000000
0'
0!
#900000000000
b1001 (
0I#
0M#
0Q#
1U#
b1110001100000001 %
b1110001100000001 +
1'
1!
#901000000000
0X"
0V#
b0 ?
1F#
0J#
0N#
1R#
0X#
0F
b0 A
0M"
1H#
0L#
0P#
1T#
0b"
0I"
0R"
b1001100110010011 /
b1001100110010011 A#
0`"
1J"
0O"
0N"
0T"
b11 A"
0S"
b0 @"
1]"
b1001100110010011 1
b1001100110010011 ;
b1001100110010011 C
b1001 Y"
0\"
b0 W"
0P
b0 H
1Q
0U
0Y
b11 I
1c
b1001 _
0N
0R
0V
0F"
0K"
0P"
1`
1Z"
b1 D
b1 >"
b1001 Z
b1001 U"
0G#
0K#
0O#
1S#
b1001100110010001 0
b1001100110010001 2
b1001100110010001 :
b1001100110010001 =
b1001100110010001 ?#
#950000000000
0'
0!
#1000000000000
b1100110100001101 %
b1100110100001101 +
1I#
b1010 (
1'
1!
#1001000000000
1J#
1L#
0F#
1O"
0H#
1M"
b1001100110010101 /
b1001100110010101 A#
1I"
b10 @"
0J"
b1001100110010101 1
b1001100110010101 ;
b1001100110010101 C
b101 A"
1P
b10 H
0Q
b1 I
1N
1F"
b11 D
b11 >"
1G#
b1001100110010011 0
b1001100110010011 2
b1001100110010011 :
b1001100110010011 =
b1001100110010011 ?#
#1050000000000
0'
0!
#1100000000000
b1011 (
0I#
1M#
b1111000101110110 %
b1111000101110110 +
1'
1!
#1101000000000
0N#
1F#
1J#
0P#
0M"
1H#
1L#
0T"
0I"
b1001100110010111 /
b1001100110010111 A#
0R"
1J"
1O"
b1001100110010111 1
b1001100110010111 ;
b1001100110010111 C
b111 A"
0N"
b0 @"
0P
b0 H
1Q
1U
b111 I
0N
1R
0F"
1K"
b101 D
b101 >"
0G#
1K#
b1001100110010101 0
b1001100110010101 2
b1001100110010101 :
b1001100110010101 =
b1001100110010101 ?#
#1150000000000
0'
0!
#1200000000000
0F#
1N#
1V#
0^#
1j#
0r#
1z#
0H#
1P#
1X#
0`#
1l#
0t#
1|#
b1100110100111101 /
b1100110100111101 A#
1&
1,
b1100110100111101 %
b1100110100111101 +
1I#
b1100 (
1'
1!
