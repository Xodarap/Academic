Ben West's Multiplication Algorithm

Takes two lines of data from std in, each representing a number.
Returns one line to std out indicating the product of the two numbers, and another indicating the number of additions and multiplications done.

Sample:
ben@ben-1000 ~/S/g/A/c/p1> ./multiplication 
99
99
9801
(32,32)


I input 99*99 here, and it gave me the result of 9801. It did 32 adds (first number) and 32 multiplications (second number) in the process. 


== To build it yourself ==
You will need ghc and cabal. Once you have these, do
    cabal install hmatrix
from a command line. (This is just for the unit tests. If you comment those out, you don't need cabal or hmatrix.)

You can compile the file using 
    ghc --make multiplication.hs

If you want to do it interactively in ghci, you can use the Enum notation:
   Prelude>:l multiplication.hs
   *Main>mymulti [1..100] [55..74]
   -- Returns the value of [1,...,100] * [55,...,74]

To ensure everything works, you can run the dotests method
   *Main>doTests
   -- Some quickCheck output

== Algorithm discussion ==
The multiplication is based on the FFT algorithm in the book. Numbers are padded with zeros to be near a power of two. If a digit is > 9, we "ripple" the carry down the line.