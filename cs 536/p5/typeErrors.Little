void fn() {}

void conditionalTests(){
     double x;
     int y;

     if(2.0)  {}
     if(x++)  {}  /* cascade a few errors for good luck */
     if(x--)  {}
     if(x+y)  {}
     if(x*y)  {}
     if(x-y)  {}
     if(x/y)  {}
     if(x=y)  {}
     if(x&&y) {}
     if(x||y) {}
     if(!x)   {}
     if(-x)   {}
     if(fn)   {}

     if(2.0)  {} else {} 
     if(x++)  {} else {}
     if(x--)  {} else {}
     if(x+y)  {} else {}
     if(x*y)  {} else {}
     if(x-y)  {} else {}
     if(x/y)  {} else {}
     if(x=y)  {} else {}
     if(x&&y) {} else {}
     if(x||y) {} else {}
     if(!x)   {} else {}
     if(-x)   {} else {}  
     if(1)    {} else {}
     if(fn)   {} else {}

     while(2.0)  {}
     while(x++)  {}
     while(x--)  {}
     while(x+y)  {}
     while(x*y)  {}
     while(x-y)  {}
     while(x/y)  {}
     while(x=y)  {}
     while(x&&y) {}
     while(x||y) {}
     while(!x)   {}
     while(-x)   {}
     while(fn)   {}
}

void doubleTests() {
     double x;
     int y;

     x = x++;
     x = x--;
     x = x+y;
     x = x*y;
     x = x-y;
     x = x/y;
     x = x=y;
     x = x&&y;
     x = x||y;
     x = !x;
     x = -x;
     x = y;
     x = x = y;
}

void fnTests() {
     double x;
     int y;

     x = fn++;
     x = fn--;
     x = fn+y;
     x = fn*y;
     x = fn-y;
     x = fn/y;
     x = fn=y;
     x = fn&&y;
     x = fn||y;
     x = !fn;
     x = -fn;
     fn = y;
     fn = x = y;

     return x;
     return y;
     return x++;
     return x && y;
     return x / y;
     return;

     x();
     x(x && y);
     x(y(x));
}

double d(int x) { return x; return x++; return; }
int i(double x) { return x; return x++; return; }
/* Functions
// Ints */
int f1(double x) { return x++;  }
int f2(double x) { return x--;  }
/*     double
int f3(double x) { return ++x;  }
int f4(double x) { return --x;  }*/
int f5(double x) { return x+x;  }
int f6(double x) { return x*x;  }
int f7(double x) { return x-x;  }
int f8(double x) { return x/x;  }
int f9(double x) { return x=x;  }
int f0(double x) { return x==x; }
int f11(double x) { return x&&x; }
int f12(double x) { return x||x; }
int f13(double x) { return x!=x; }
int f14(double x) { return !x;   }
int f15(double x) { return -x;   }
int f16(double x) { return x;  }

/* unary double or double on right side is a double */
int g5(int x, double y) { return x+y;	 }
int g6(int x, double y) { return x*y;	 }
int g7(int x, double y) { return x-y;	 }
int g8(int x, double y) { return x/y;	 }
int g9(int x, double y) { return x=y;	 }
int g0(int x, double y) { return x==y; }
int h3(int x, double y) { return x!=y; }
int h5(int x, double y) { return -y;   }

/* double on left side is a double */
int h6(int x, double y) { return y+x;   }
int h7(int x, double y) { return y*x;	  }
int h8(int x, double y) { return y-x;	  }
int h9(int x, double y) { return y/x;	  }
int h0(int x, double y) { return y=x;	  }
int i1(int x, double y) { return y==x;  }
int i4(int x, double y) { return y!=x;  }

/* double on both sides is a double */
int i5(int x, double y) { return y+y;	  }
int i6(int x, double y) { return y*y;	  }
int i7(int x, double y) { return y-y;	  }
int i8(int x, double y) { return y/y;	  }
int i9(int x, double y) { return y=y;	  }
int i0(int x, double y) { return y==y;  }
int j1(int x, double y) { return y!=y;  }

/* Make sure the type checking filters down through lower blocks */
void j2(int x, double y) { return; }
void j3() { if(1) { return; } }
void j4() { if(1) { return; } else { return; }}
void j5() { while(1) { return; }}
int  j6(int x) { if(1) { return x; }}
int  j7(int x) { if(1) { return x; } else { return x; }}
int  j8(int x) { while(1) { return x; }}
int  j9(int x) { return x; }
int  k6(double x) { if(1) { return x; }}
int  k7(double x) { if(1) { return x; } else { return x; }}
int  k8(double x) { while(1) { return x; }}
int  k9(double x) { return x; }
int  k0(double x) { if(1) { return x; }}
int  k1(double x) { if(1) { return x; } else { return x; }}
int  k2(double x) { while(1) { return x; }}
int  k3(double x) { return x; }

void iotests(){
     if(1) {
     	   double x;
	   int y;
	   printf("%d", x);
	   printf("%d", x++);  /* cascADE.... */
	   scanf ("%d", &x);
	   printf("%f", y);
	   printf("%f", y && x);
	   scanf ("%f", &y);
     }
}

