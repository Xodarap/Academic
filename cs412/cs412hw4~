1. Code: (see attached for diary etc)
% data is of the following form:
% 	x1			x2			x3		...
%		f(x1)		f(X2)		f(x3)	...
%		f'(x1)	f'(x2)	f'(x3)...
% n = cols(data)
function herm = hermite(n, data)

% coefficient matrix, where the nth row represents the polynomial for
% the nth interval. Coefficients are listed from highest to lowest
% [so coeffs(:,1) is for t^3]
coeffs = zeros(n-1, 4);
for i=1:(n-1)
	dd = hermiteDivDif(data(:,i:i+1));
	l = data(1,i); r = data(1,i+1);	%endpoints of this piece

	% lengthy algebraic manipulations have revealed that an expansion of
	%	the polynomial yields these coefficients. 
	% an is the coefficient of t^n
	a0 = dd(1,1) - dd(1,2) * l + dd(1,3) * (l .^ 2) - dd(1,4) * (l .^2 )* r;
	a1 = dd(1,2) - 2 * dd(1,3) * l + dd(1,4) * l ^2 + 2 * dd(1,4) * l * r;
	a2 = dd(1,3) - 2 * dd(1,4) * l - dd(1,4) * r;
	a3 = dd(1,4);
	coeffs(i,:) = [a3 a2 a1 a0];
end

herm = mkpp(data(1,:), coeffs);

% Calculates the divided differences table with Hermite's method
% Expects:
%		 [l 		r]
%		 [f(l) 	f(r)] 
%		 [f'(l) f'(r)]
function dd = hermiteDivDif(d)
denom = d(1,1) - d(1,2);
dd = zeros(4);
% column 1
% Repeat f(l) and f(r) twice
dd(:,1) = [d(2,1) d(2,1) d(2,2) d(2,2)]';

% column 2
dd(1,2) = d(3,1);	% dd(1,2) = f'(l)
dd(2,2) = (dd(2,1) - dd(3,1)) / (denom);
dd(3,2) = d(3,2);	% dd(3,2) = f'(r)

% column 3
dd(1,3) = (dd(1,2) - dd(2,2)) / (denom);
dd(2,3) = (dd(2,2) - dd(3,2)) / (denom);

% column 4
dd(1,4) = (dd(1,3) - dd(2,3)) / (denom);

% Evaluates the various types of interpolants used in this hw
function evalHerm(a, b, n, f, fprime)
chebyRange = chebyshev(a,b,n);
equalRange = linspace(a,b,n);
equalPP = hermite(length(equalRange), [equalRange; f(equalRange); fprime(equalRange)]);
chebyPP = hermite(length(chebyRange), [chebyRange; f(chebyRange); fprime(chebyRange)]);

evalRange = linspace(a, b, 10 * n);

equalVals = evalPP(equalPP, evalRange);
chebyVals = evalPP(chebyPP, evalRange);
splineVals = spline(equalRange, f(equalRange), evalRange);
actualVals = f(evalRange);

% some rough summation of the error
h = (b - a) / (10 * n);
eqErr = h * sum(abs(actualVals - equalVals));
chebErr = h * sum(abs(actualVals - chebyVals));
spErr = h * sum(abs(actualVals - splineVals));

plot(evalRange, actualVals - equalVals, '-b', ...
 			evalRange, actualVals - chebyVals, '-g', ...
			evalRange, actualVals - splineVals, '-r');
legend(sprintf('Hermite - Equidistant: %f', eqErr), ...
								sprintf('Hermite - Chebyshev: %f', chebErr), ...
								sprintf('Spline: %f', spErr));

% Evaluates the pp made in hermite.m
function y = evalPP(pp, range)
y = zeros(1,length(range));
for i=1:length(range)
	xi = range(i);
	idx = lookup(pp.x(2:pp.n), xi) + 1;
	y(1,i) = dot([xi^3 xi^2 xi 1], pp.P(idx,:));
end

% from last hw
function x = chebyshev(a,b,n)
i = 1:n;
x = ((a+b)/2) .+ (b-a).*cos(i .* pi / (n+1)) ./ 2;
2.a.
function h = hilbert(n)
i = 1:n; 
for j=1:n
	h(i,j) = 1 ./ (i + j - 1);
end


octave:38> for i = 1:20
octave:38+> disp(sprintf('%d\t%e\t%e',i, cond(rand(i,i)), cond(hilbert(i))));
octave:38+> end
1	1.000000e+00	1.000000e+00
2	2.121598e+00	1.928147e+01
3	6.605407e+00	5.240568e+02
4	8.823001e+00	1.551374e+04
5	3.086799e+01	4.766073e+05
6	1.013726e+02	1.495106e+07
7	1.527573e+02	4.753674e+08
8	7.255710e+01	1.525758e+10
9	5.986956e+01	4.931536e+11
10	2.638723e+03	1.602504e+13
11	6.282153e+01	5.218686e+14
12	4.775119e+01	1.634393e+16
13	6.823246e+01	5.154679e+17
14	1.074467e+02	1.998801e+17
15	4.884446e+01	2.955030e+17
16	1.598331e+02	5.117190e+17
17	2.669084e+02	5.140075e+17
18	6.289180e+02	1.628567e+18
19	2.947962e+02	7.024793e+18
20	4.653756e+02	2.017825e+18

Obviously hilbert matrices are much less well conditioned. 

b.

function x = conditionExperiment(A)
n = size(A);
[evec,eval] = eig(A' * A);
norms = zeros(n,1);
% calculate the formula designated as aleph in the assignment for each eig vec
for i=1:n
	norms(i) = norm(A * evec(:,i)) / norm(evec(:,i));
end

disp(sprintf('Max norm:  %e', max(norms)));
disp(sprintf('Min norm:  %e', min(norms)));

% We expect max / min == cond
disp(sprintf('Max / Min: %e', max(norms) / min(norms)));
disp(sprintf('Condition: %e', cond(A)));


octave:109> conditionExperiment(hilbert(6))
Max norm: 1.618900e+00
Min norm: 1.082799e-07
Max / Min: 1.495106e+07
Condition: 1.495106e+07
octave:111> conditionExperiment(rand(6))
Max norm: 3.201713e+00
Min norm: 7.603716e-02
Max / Min: 4.210721e+01
Condition: 4.210721e+01
octave:113> conditionExperiment(eye(6))
Max norm: 1.000000e+00
Min norm: 1.000000e+00
Max / Min: 1.000000e+00
Condition: 1.000000e+00
octave:115> conditionExperiment(hilbert(10))
Max norm:  1.751920e+00
Min norm:  8.252297e-10
Max / Min: 2.122948e+09
Condition: 1.602504e+13
octave:117> conditionExperiment(rand(10))
Max norm:  5.384876e+00
Min norm:  1.074496e-01
Max / Min: 5.011537e+01
Condition: 5.011537e+01
octave:119>

c.
octave:48> A
A =

 Columns 1 through 6:

   0.6803782   0.7555418   0.4357520   0.9873525   0.9805590   0.7466552
   0.9609457   0.8006574   0.2785390   0.0415778   0.1696092   0.8651437
   0.2985311   0.8732687   0.4523402   0.3285079   0.2529279   0.4060151
   0.7304004   0.9470280   0.3464480   0.0316518   0.7947343   0.5278137
   0.0990972   0.2764538   0.1204600   0.7195059   0.9158484   0.2350862
   0.1447513   0.7157020   0.2007098   0.4909010   0.3945669   0.1001338
   0.1196148   0.5885328   0.1281605   0.2796378   0.5549183   0.6037297
   0.3464753   0.6452237   0.7466456   0.9696781   0.2519893   0.8811370
   0.3210166   0.9045838   0.6253600   0.6372503   0.5778762   0.8537041
   0.7007309   0.7727155   0.1911683   0.7516401   0.0755386   0.3800502

 Columns 7 through 10:

   0.9033629   0.7295555   0.7739320   0.7400571
   0.0070090   0.9988065   0.5035563   0.1806601
   0.1874271   0.8450849   0.0022115   0.9255097
   0.9791704   0.5449854   0.2655528   0.4606064
   0.0916126   0.0048790   0.6003291   0.9216283
   0.4501305   0.8541163   0.0606621   0.5655135
   0.9037735   0.3430047   0.9018682   0.7730561
   0.2513875   0.7925274   0.1907692   0.0824449
   0.5039043   0.7051060   0.1103222   0.4229634
   0.0250956   0.4109581   0.0646081   0.7643673

octave:34> cond(A)
ans =  79.167
octave:36> [Q R] = qr(A);
octave:38> Q
Q =

 Columns 1 through 6:

  -0.4089371  -0.0927455   0.1775261   0.4216092  -0.3488284  -0.0781651
  -0.5775704  -0.3711141  -0.0756505  -0.2864146   0.0922205   0.3536742
  -0.1794303   0.4475400  -0.0060369  -0.2641988   0.1983147  -0.2606448
  -0.4390026   0.0229434  -0.1600475  -0.4104172  -0.4394923  -0.3723266
  -0.0595618   0.1364600  -0.0408784   0.5093474  -0.4815214  -0.0312682
  -0.0870019   0.4803997  -0.3295150   0.1421523   0.1668347  -0.2866778
  -0.0718937   0.3943766  -0.3358749   0.0372371  -0.1307734   0.7306672
  -0.2082468   0.1875087   0.7540721   0.0962412   0.2040062   0.0753351
  -0.1929450   0.4501934   0.2731983  -0.1472562  -0.0475638   0.1774777
  -0.4211700  -0.1004112  -0.2660539   0.4358826   0.5627190  -0.0896205

 Columns 7 through 10:

  -0.3915871  -0.3043010  -0.0119854  -0.4909426
   0.3930962  -0.3800582  -0.0458225   0.0791943
   0.2775746  -0.0350046   0.5341039  -0.4763096
  -0.2572119   0.3276662   0.0534364   0.3233166
   0.6376933   0.1211630   0.1412584   0.2063916
  -0.0723572  -0.5774739  -0.2694340   0.3339686
  -0.2989919   0.0801985   0.2744414   0.0545659
  -0.1290452  -0.0394502   0.2624442   0.4573914
   0.1696252   0.2732396  -0.6867752  -0.2343565
  -0.0471098   0.4728231  -0.0350747   0.0077108

octave:40> R
R =

 Columns 1 through 7:

  -1.66377  -2.09923  -0.96284  -1.24774  -1.21778  -1.68398  -1.10670
   0.00000   1.10963   0.63235   0.87827   0.81074   0.63317   0.87661
   0.00000   0.00000   0.56701   0.58532   0.00648   0.53135  -0.13308
   0.00000   0.00000   0.00000   1.07837   0.48716   0.02432   0.03271
   0.00000   0.00000   0.00000   0.00000  -1.00684  -0.15455  -0.75341
   0.00000   0.00000   0.00000   0.00000   0.00000   0.53417   0.15302
   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000  -0.74334
   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000

 Columns 8 through 10:

  -1.83954  -0.91840  -1.35563
   0.92341   0.29412   1.12052
   0.24570  -0.13386  -0.47090
  -0.13718   0.45076   0.68414
   0.22038  -0.66667  -0.28409
   0.02668   0.66912  -0.01999
   0.03807  -0.07297   0.26040
  -0.56204  -0.17675   0.14549
   0.00000   0.27102   0.39611
   0.00000   0.00000  -0.27518

octave:42> cond(Q)
ans =  1.0000
octave:44> cond(R)
ans =  79.167
octave:46> cond(Q)*cond(R) / cond(A)
ans =  1.0000

octave:52> A = hilbert(10)
A =

 Columns 1 through 7:

   1.000000   0.500000   0.333333   0.250000   0.200000   0.166667   0.142857
   0.500000   0.333333   0.250000   0.200000   0.166667   0.142857   0.125000
   0.333333   0.250000   0.200000   0.166667   0.142857   0.125000   0.111111
   0.250000   0.200000   0.166667   0.142857   0.125000   0.111111   0.100000
   0.200000   0.166667   0.142857   0.125000   0.111111   0.100000   0.090909
   0.166667   0.142857   0.125000   0.111111   0.100000   0.090909   0.083333
   0.142857   0.125000   0.111111   0.100000   0.090909   0.083333   0.076923
   0.125000   0.111111   0.100000   0.090909   0.083333   0.076923   0.071429
   0.111111   0.100000   0.090909   0.083333   0.076923   0.071429   0.066667
   0.100000   0.090909   0.083333   0.076923   0.071429   0.066667   0.062500

 Columns 8 through 10:

   0.125000   0.111111   0.100000
   0.111111   0.100000   0.090909
   0.100000   0.090909   0.083333
   0.090909   0.083333   0.076923
   0.083333   0.076923   0.071429
   0.076923   0.071429   0.066667
   0.071429   0.066667   0.062500
   0.066667   0.062500   0.058824
   0.062500   0.058824   0.055556
   0.058824   0.055556   0.052632

octave:54> cond(A)
ans =  1.6025e+13
octave:56> [Q R] = qr(A)
Q =

 Columns 1 through 6:

  -8.0328e-01   5.5033e-01   2.1648e-01  -6.8283e-02   1.8268e-02  -4.1892e-03
  -4.0164e-01  -2.5442e-01  -6.5768e-01   5.1362e-01  -2.5922e-01   9.7690e-02
  -2.6776e-01  -3.4614e-01  -2.8085e-01  -3.3994e-01   5.9766e-01  -4.4990e-01
  -2.0082e-01  -3.3904e-01  -1.5850e-02  -4.4110e-01   5.7403e-02   4.7107e-01
  -1.6066e-01  -3.1360e-01   1.3840e-01  -2.9742e-01  -3.1508e-01   3.0962e-01
  -1.3388e-01  -2.8655e-01   2.2632e-01  -1.0802e-01  -3.8629e-01  -1.2883e-01
  -1.1475e-01  -2.6183e-01   2.7588e-01   6.5812e-02  -2.6381e-01  -3.7657e-01
  -1.0041e-01  -2.4013e-01   3.0286e-01   2.0940e-01  -4.6072e-02  -3.2888e-01
  -8.9253e-02  -2.2130e-01   3.1625e-01   3.2297e-01   2.0563e-01  -2.7463e-02
  -8.0328e-02  -2.0494e-01   3.2131e-01   4.1084e-01   4.5769e-01   4.5049e-01

 Columns 7 through 10:

   8.1698e-04  -1.3217e-04   1.6809e-05   1.4607e-06
  -2.8747e-02   6.6179e-03  -1.1472e-03  -1.3146e-04
   2.1977e-01  -7.6135e-02   1.8657e-02   2.8921e-03
  -5.4813e-01   3.2926e-01  -1.2294e-01  -2.6993e-02
   2.8624e-01  -5.6846e-01   3.8820e-01   1.3159e-01
   4.0966e-01   1.7626e-01  -5.8018e-01  -3.6846e-01
  -2.6991e-02   4.3975e-01   2.3496e-01   6.1410e-01
  -3.9676e-01  -9.6319e-02   3.9727e-01  -6.0157e-01
  -3.0246e-01  -4.9690e-01  -5.0516e-01   3.1958e-01
   3.8865e-01   2.8631e-01   1.7035e-01  -7.1019e-02

R =

 Columns 1 through 7:

  -1.24490  -0.73025  -0.53248  -0.42364  -0.35359  -0.30429  -0.26752
   0.00000  -0.15736  -0.17682  -0.17268  -0.16314  -0.15273  -0.14279
   0.00000   0.00000   0.01345   0.02215   0.02719   0.02997   0.03139
   0.00000   0.00000   0.00000   0.00094   0.00202   0.00298   0.00376
   0.00000   0.00000   0.00000   0.00000   0.00005   0.00015   0.00025
   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00001
   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000

 Columns 8 through 10:

  -0.23895  -0.21605  -0.19727
  -0.13369  -0.12547  -0.11809
   0.03196   0.03202   0.03175
   0.00436   0.00482   0.00516
   0.00035   0.00045   0.00054
   0.00002   0.00003   0.00004
   0.00000   0.00000   0.00000
   0.00000   0.00000   0.00000
   0.00000   0.00000   0.00000
   0.00000   0.00000  -0.00000

octave:58> cond(Q)
ans =  1.0000
octave:60> cond(R)
ans =  1.6025e+13
octave:62> cond(Q) * cond(R) / cond(A)
ans =  1.0000



I tried this several times, and I found that cond(Q) always equals 1, and cond(R) always equals cond(A), so the ratio is always one.

In QR factorization, Q only has unit eigenvalues. So we would expect cond(Q) = 1. I'm not sure why cond(R) would equal cond(A) though. Out of curiosity, I tried an LU decomposition as well: 

octave:77> [l u] = lu(A);
octave:79> cond(l)
ans =  9.6968
octave:81> cond(u)
ans =  7.0548e+12
octave:83> cond(l) * cond(u) / cond(A)
ans =  4.2689
octave:85>

So it appears that QR factorization is better than LU decomp, which makes a bit of sense, because Q has cond = 1.


d.

octave:178> A = hilbert(10);
octave:179> cond(A)
ans =  1.6025e+13		% Poorly conditioned
octave:180> x = rand(10,1);
octave:183> b = A*x;
octave:185> xEstimate = A \ b;
octave:189> norm(xEstimate - x)
ans =  4.3893e-04
octave:191> A = rand(10);
octave:193> cond(A)
ans =  128.30		%OK, it's a well-conditioned matrix
octave:197> b = A*x;
octave:199> xEstimate = A \ b;
octave:201> norm(xEstimate - x)
ans =  6.8062e-15

The well conditioned matrix has errors which are more than 10 factors of 10 smaller. 
